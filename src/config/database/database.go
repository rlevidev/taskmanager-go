package database

import (
	"errors"
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/rlevidev/taskmanager-go/src/models"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

var DB *gorm.DB

// validateDBConfig valida as configura√ß√µes do banco de dados
func validateDBConfig() error {
	log.Println("üîç Validando configura√ß√µes do banco de dados...")

	// Verificar vari√°veis obrigat√≥rias
	requiredVars := map[string]string{
		"DB_HOST":     os.Getenv("DB_HOST"),
		"DB_PORT":     os.Getenv("DB_PORT"),
		"DB_USER":     os.Getenv("DB_USER"),
		"DB_PASSWORD": os.Getenv("DB_PASSWORD"),
		"DB_NAME":     os.Getenv("DB_NAME"),
	}

	var missingVars []string
	for varName, value := range requiredVars {
		if value == "" {
			missingVars = append(missingVars, varName)
		}
	}

	if len(missingVars) > 0 {
		return fmt.Errorf("‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o definidas: %v\nüí° Verifique seu arquivo .env", missingVars)
	}

	// Validar se a porta √© um n√∫mero v√°lido
	if port := os.Getenv("DB_PORT"); port != "" {
		if _, err := strconv.Atoi(port); err != nil {
			return fmt.Errorf("‚ùå DB_PORT deve ser um n√∫mero v√°lido, recebeu: %s", port)
		}
	}

	// Validar formato do host (n√£o vazio ap√≥s trim)
	if host := os.Getenv("DB_HOST"); host == "" {
		return errors.New("‚ùå DB_HOST n√£o pode estar vazio")
	}

	log.Println("‚úÖ Configura√ß√µes validadas com sucesso!")
	return nil
}

// Init inicializa a conex√£o com o banco de dados PostgreSQL
func Init() (*gorm.DB, error) {
	// Validar configura√ß√µes antes de conectar
	if err := validateDBConfig(); err != nil {
		return nil, err
	}

	// Configura√ß√£o do PostgreSQL via vari√°veis de ambiente
	host := os.Getenv("DB_HOST")
	port := os.Getenv("DB_PORT")
	user := os.Getenv("DB_USER")
	password := os.Getenv("DB_PASSWORD")
	dbname := os.Getenv("DB_NAME")

	// DSN (Data Source Name) para PostgreSQL
	dsn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname)

	log.Println("Conectando ao banco PostgreSQL...")
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Printf("Erro ao conectar ao banco PostgreSQL: %v", err)
		return nil, err
	}

	// Testar a conex√£o
	sqlDB, err := db.DB()
	if err != nil {
		log.Printf("Erro ao obter conex√£o do banco: %v", err)
		return nil, err
	}

	if err := sqlDB.Ping(); err != nil {
		log.Printf("Erro ao fazer ping no banco PostgreSQL: %v", err)
		return nil, err
	}

	log.Println("‚úÖ Conectado ao PostgreSQL com sucesso!")

	// Auto-migrate das tabelas
	err = db.AutoMigrate(
		&models.UserDomain{},
	)
	if err != nil {
		log.Printf("Erro ao migrar o banco de dados: %v", err)
		return nil, err
	}

	log.Println("‚úÖ Migra√ß√µes do banco de dados executadas com sucesso!")

	return db, nil
}
